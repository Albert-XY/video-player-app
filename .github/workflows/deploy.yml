name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Docker
        run: |
          # 配置镜像加速器（无密码方式）
          echo "{\"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"]}" | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin <<< "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Build and push images with retry
        run: |
          export DOCKER_BUILDKIT=1
          retry_build() {
            local image=$1
            for i in {1..3}; do
              docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-$image:latest -f Dockerfile.$image . && docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-$image:latest && return 0
              echo "构建 $image 第 $i 次失败，等待 15 秒..."
              sleep 15
            done
            exit 1
          }

          retry_build frontend
          retry_build backend
          retry_build nginx

      - name: Deploy to Production Server
        uses: Appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            set -e  # 任何命令失败立即退出

            # 配置环境
            export GIT_SSL_NO_VERIFY=1
            git config --global pull.rebase false

            # 初始化目录（无sudo）
            mkdir -p $HOME/video-player-app
            cd $HOME/video-player-app

            # 克隆/更新仓库（带重试）
            for i in {1..5}; do
              if [ -d .git ]; then
                git fetch --all && git reset --hard origin/master && break
              else
                git clone --depth=1 https://github.com/Albert-XY/video-player-app.git . && break
              fi
              [[ $i -eq 5 ]] && exit 1
              sleep 10
            done

            # 配置Docker加速（使用root权限）
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S bash -c '
              mkdir -p /etc/docker
              echo "{\"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"]}" > /etc/docker/daemon.json
              systemctl daemon-reload
              systemctl restart docker
            '

            # 带指数退避的镜像拉取
            pull_image() {
              local image=$1
              local delay=5
              for i in {1..5}; do
                if sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/video-player-$image:latest; then
                  echo "成功拉取 $image 镜像"
                  return 0
                fi
                echo "第 $i 次尝试拉取 $image 镜像失败，等待 ${delay}秒..."
                sleep $delay
                delay=$((delay * 2))
              done
              exit 1
            }

            pull_image frontend
            pull_image backend
            pull_image nginx

            # 部署流程
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans

            # 健康检查函数
            health_check() {
              local attempts=0
              while [ $attempts -lt 10 ]; do
                if curl -fsS http://localhost/api/health | grep -q '"status":"healthy"'; then
                  echo "健康检查通过"
                  return 0
                fi
                attempts=$((attempts+1))
                sleep 10
              done
              echo "健康检查失败"
              return 1
            }

            # 启动并验证
            if sudo docker-compose -f docker-compose.prod.yml up -d && health_check; then
              echo "::notice title=部署成功::服务已正常启动 ✅"
              # 清理旧备份（保留最近3个）
              ls -t docker-compose.prod.yml.backup.* | tail -n +4 | xargs rm -f
            else
              echo "::error title=部署失败::正在尝试回滚..."
              latest_backup=$(ls -t docker-compose.prod.yml.backup.* | head -1)
              if [ -f "$latest_backup" ]; then
                cp "$latest_backup" docker-compose.prod.yml
                sudo docker-compose -f docker-compose.prod.yml down
                sudo docker-compose -f docker-compose.prod.yml up -d
              fi
              exit 1
            fi

      - name: Deployment Notification
        if: always()
        run: |
          echo "::notice::部署最终状态：${{ job.status }}"
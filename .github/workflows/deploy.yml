name: Deploy to Production

# 1、已经使用sudo visudo添加免密配置 2、创建回滚机制，在部署失败后自动回滚
# 触发条件：当代码推送到 master 分支时触发
on:
  push:
    branches:
      - master

jobs:
  # 阶段一：构建并推送 Docker 镜像
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # 步骤 2：安装 Docker Compose
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # 步骤 3：登录 DockerHub 容器注册表
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push images
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        MONGO_USER: ${{ secrets.MONGO_USER }}
        MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      run: |
        docker-compose -f docker-compose.prod.yml build
        docker-compose -f docker-compose.prod.yml push

  # 阶段二：服务器部署（依赖构建阶段）
  deploy:
    runs-on: ubuntu-latest
    needs: [build]  # 确保先完成镜像构建
    steps:
    - uses: actions/checkout@v2

    - name: Set up environment variables
      run: |
        echo "POSTGRES_HOST=db" >> $GITHUB_ENV
        echo "POSTGRES_DB=videoeeg" >> $GITHUB_ENV
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
        echo "MONGO_URI=mongodb://${{ secrets.MONGO_USER }}:${{ secrets.MONGO_PASSWORD }}@mongodb:27017" >> $GITHUB_ENV
        echo "REDIS_HOST=redis" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV

    - name: Deploy to CentOS 7 server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set -e  # 任何步骤失败立即停止
          DEPLOY_DIR="Xproject/EMOtestapp/video-player-app"
          
          # 定义回滚函数
          rollback() {
            echo "‼️ Deployment failed! Rolling back..."
            cd $DEPLOY_DIR
            docker-compose down  # 停止新容器
            docker-compose up -d  # 尝试重新启动旧服务
            exit 1
          }
          trap rollback ERR  # 捕获错误触发回滚

          # 开始部署
          cd $DEPLOY_DIR
          git fetch --all
          git reset --hard origin/master

          # 记录当前容器状态（用于回滚）
          OLD_CONTAINERS=$(docker ps -aq)

          docker-compose pull  # 拉取最新镜像（来自构建阶段）
          docker-compose up -d db mongodb redis

          # 数据库健康检查（替代 sleep 30）
          echo "🔍 Checking database readiness..."
          timeout 60s bash -c 'until docker-compose exec db pg_isready; do sleep 2; done'
          timeout 60s bash -c 'until nc -z mongodb 27017; do sleep 2; done'
          timeout 60s bash -c 'until nc -z redis 6379; do sleep 2; done'

          # 启动应用服务
          docker-compose up -d app

          # 日志监控（检查应用是否正常启动）
          sleep 10  # 给应用启动留出时间
          if ! docker-compose logs app | grep -q "Application started"; then
            echo "❌ App failed to start!"
            exit 1
          fi

          # 清理旧容器
          if [ -n "$OLD_CONTAINERS" ]; then
            docker rm -f $OLD_CONTAINERS || true
          fi

          # 防火墙配置（非交互式 sudo）
          echo ${{ secrets.SUDO_PASSWORD }} | sudo -S firewall-cmd --permanent --add-port=8080/tcp
          sudo firewall-cmd --reload
          sudo systemctl restart docker

          echo "✅ Deployment successful!"
name: Test Deployment Process

on:
  workflow_dispatch:  # Manual trigger

jobs:
  test-deployment:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Docker
        run: |
          # 配置多个镜像源
          echo "{
            \"registry-mirrors\": [
              \"https://registry.cn-hangzhou.aliyuncs.com\",
              \"https://mirror.ccs.tencentyun.com\",
              \"https://hub-mirror.c.163.com\",
              \"https://docker.mirrors.ustc.edu.cn\"
            ]
          }" | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin <<< "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Build test images
        run: |
          export DOCKER_BUILDKIT=1
          # 设置更长的超时时间
          export DOCKER_CLIENT_TIMEOUT=120
          export COMPOSE_HTTP_TIMEOUT=120
          
          # Build with test tag
          docker build --network=host -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-frontend:test -f Dockerfile.frontend .
          docker build --network=host -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-backend:test -f Dockerfile.backend .
          docker build --network=host -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-nginx:test -f Dockerfile.nginx .
          
          # Push test images
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-frontend:test
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-backend:test
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-nginx:test

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            echo "SSH connection test successful"
            pwd
            whoami

      - name: Test Deployment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            set -e

            # 配置 Docker 镜像源
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S bash -c '
              mkdir -p /etc/docker
              echo "{
                \"registry-mirrors\": [
                  \"https://registry.cn-hangzhou.aliyuncs.com\",
                  \"https://mirror.ccs.tencentyun.com\",
                  \"https://hub-mirror.c.163.com\",
                  \"https://docker.mirrors.ustc.edu.cn\"
                ]
              }" > /etc/docker/daemon.json
              systemctl daemon-reload
              systemctl restart docker
            '

            # 设置 Docker 超时时间
            export DOCKER_CLIENT_TIMEOUT=120
            export COMPOSE_HTTP_TIMEOUT=120

            # Create test directory
            mkdir -p $HOME/video-player-test
            cd $HOME/video-player-test

            # Clone repository
            git clone --depth=1 https://github.com/Albert-XY/video-player-app.git .

            # Create test docker-compose file
            cat > docker-compose.test.yml << 'EOL'
            version: '3.8'
            services:
              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/video-player-frontend:test
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=test
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/video-player-backend:test
                ports:
                  - "8000:8000"
                environment:
                  - ENVIRONMENT=test
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              nginx:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/video-player-nginx:test
                ports:
                  - "80:80"
                depends_on:
                  frontend:
                    condition: service_healthy
                  backend:
                    condition: service_healthy
            EOL

            # 带重试的镜像拉取函数
            pull_image() {
              local image=$1
              local max_attempts=5
              local delay=5
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "尝试拉取 $image 镜像 (第 $attempt 次)"
                if docker pull ${{ secrets.DOCKERHUB_USERNAME }}/video-player-$image:test; then
                  echo "成功拉取 $image 镜像"
                  return 0
                fi
                
                if [ $attempt -eq $max_attempts ]; then
                  echo "拉取 $image 镜像失败，已达到最大重试次数"
                  return 1
                fi
                
                echo "等待 ${delay} 秒后重试..."
                sleep $delay
                delay=$((delay * 2))
                attempt=$((attempt + 1))
              done
            }

            # 拉取镜像
            pull_image frontend || exit 1
            pull_image backend || exit 1
            pull_image nginx || exit 1

            # Start test deployment
            docker-compose -f docker-compose.test.yml down --remove-orphans
            docker-compose -f docker-compose.test.yml up -d

            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            sleep 30

            # Test endpoints with retries
            test_endpoint() {
              local url=$1
              local max_attempts=5
              local delay=5
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "测试端点 $url (第 $attempt 次)"
                if curl -f $url; then
                  echo "端点 $url 测试成功"
                  return 0
                fi
                
                if [ $attempt -eq $max_attempts ]; then
                  echo "端点 $url 测试失败，已达到最大重试次数"
                  return 1
                fi
                
                echo "等待 ${delay} 秒后重试..."
                sleep $delay
                delay=$((delay * 2))
                attempt=$((attempt + 1))
              done
            }

            # 测试所有端点
            test_endpoint http://localhost:3000 || exit 1
            test_endpoint http://localhost:8000/health || exit 1
            test_endpoint http://localhost || exit 1

            echo "All tests passed successfully!"

      - name: Cleanup Test Environment
        if: always()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd $HOME/video-player-test
            docker-compose -f docker-compose.test.yml down --remove-orphans
            rm -rf $HOME/video-player-test

      - name: Test Results
        if: always()
        run: |
          echo "::notice::Test deployment completed with status: ${{ job.status }}" 
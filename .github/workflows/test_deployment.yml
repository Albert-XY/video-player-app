name: Test Deployment Process

on:
  workflow_dispatch:  # Manual trigger

jobs:
  test-deployment:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Network Diagnostics
        run: |
          echo "Testing network connectivity..."
          curl -v https://github.com || true
          curl -v https://registry.hub.docker.com || true
          ping -c 3 8.8.8.8 || true
          traceroute github.com || true
          traceroute registry.hub.docker.com || true

      - name: Configure Docker
        run: |
          # 配置多个镜像源和网络选项
          echo "{
            \"registry-mirrors\": [
              \"https://registry.cn-hangzhou.aliyuncs.com\",
              \"https://mirror.ccs.tencentyun.com\",
              \"https://hub-mirror.c.163.com\",
              \"https://docker.mirrors.ustc.edu.cn\"
            ],
            \"max-concurrent-downloads\": 3,
            \"max-concurrent-uploads\": 3,
            \"mtu\": 1450,
            \"dns\": [\"8.8.8.8\", \"8.8.4.4\", \"223.5.5.5\", \"223.6.6.6\"],
            \"log-driver\": \"json-file\",
            \"log-opts\": {
              \"max-size\": \"100m\",
              \"max-file\": \"3\"
            }
          }" | sudo tee /etc/docker/daemon.json
          
          # 配置系统代理
          export http_proxy=http://registry.cn-hangzhou.aliyuncs.com
          export https_proxy=http://registry.cn-hangzhou.aliyuncs.com
          export no_proxy=localhost,127.0.0.1
          
          sudo systemctl restart docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin <<< "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Build test images
        run: |
          export DOCKER_BUILDKIT=1
          # 设置更长的超时时间和网络参数
          export DOCKER_CLIENT_TIMEOUT=1200
          export COMPOSE_HTTP_TIMEOUT=1200
          export DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"
          
          # Build with test tag
          docker build --network=host --dns 8.8.8.8 --dns 8.8.4.4 -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-frontend:test -f Dockerfile.frontend .
          docker build --network=host --dns 8.8.8.8 --dns 8.8.4.4 -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-backend:test -f Dockerfile.backend .
          docker build --network=host --dns 8.8.8.8 --dns 8.8.4.4 -t ${{ secrets.DOCKERHUB_USERNAME }}/video-player-nginx:test -f Dockerfile.nginx .
          
          # Push test images
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-frontend:test
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-backend:test
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/video-player-nginx:test

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            echo "SSH connection test successful"
            pwd
            whoami

      - name: Test Deployment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            set -e

            # 网络诊断
            echo "Running network diagnostics..."
            curl -v https://github.com || true
            curl -v https://registry.hub.docker.com || true
            ping -c 3 8.8.8.8 || true
            traceroute github.com || true
            traceroute registry.hub.docker.com || true

            # 配置系统 DNS
            echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
            echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
            echo "nameserver 223.5.5.5" | sudo tee -a /etc/resolv.conf
            echo "nameserver 223.6.6.6" | sudo tee -a /etc/resolv.conf

            # 配置系统代理
            export http_proxy=http://registry.cn-hangzhou.aliyuncs.com
            export https_proxy=http://registry.cn-hangzhou.aliyuncs.com
            export no_proxy=localhost,127.0.0.1

            # 配置 Docker 镜像源和网络选项
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S bash -c '
              mkdir -p /etc/docker
              echo "{
                \"registry-mirrors\": [
                  \"https://registry.cn-hangzhou.aliyuncs.com\",
                  \"https://mirror.ccs.tencentyun.com\",
                  \"https://hub-mirror.c.163.com\",
                  \"https://docker.mirrors.ustc.edu.cn\"
                ],
                \"max-concurrent-downloads\": 3,
                \"max-concurrent-uploads\": 3,
                \"mtu\": 1450,
                \"dns\": [\"8.8.8.8\", \"8.8.4.4\", \"223.5.5.5\", \"223.6.6.6\"],
                \"log-driver\": \"json-file\",
                \"log-opts\": {
                  \"max-size\": \"100m\",
                  \"max-file\": \"3\"
                }
              }" > /etc/docker/daemon.json
              
              # 重启网络和 Docker 服务
              systemctl restart NetworkManager
              systemctl daemon-reload
              systemctl restart docker
            '

            # 设置 Docker 环境变量
            export DOCKER_CLIENT_TIMEOUT=1200
            export COMPOSE_HTTP_TIMEOUT=1200
            export DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"

            # Create test directory
            mkdir -p $HOME/video-player-test
            cd $HOME/video-player-test

            # Clone repository with proxy
            git config --global http.proxy http://registry.cn-hangzhou.aliyuncs.com
            git config --global https.proxy http://registry.cn-hangzhou.aliyuncs.com
            git clone --depth=1 https://github.com/Albert-XY/video-player-app.git .

            # Create test docker-compose file
            cat > docker-compose.test.yml << 'EOL'
            version: '3.8'
            services:
              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/video-player-frontend:test
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=test
                  - http_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  - https_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  - no_proxy=localhost,127.0.0.1
                dns:
                  - 8.8.8.8
                  - 8.8.4.4
                  - 223.5.5.5
                  - 223.6.6.6
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/video-player-backend:test
                ports:
                  - "8000:8000"
                environment:
                  - ENVIRONMENT=test
                  - http_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  - https_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  - no_proxy=localhost,127.0.0.1
                dns:
                  - 8.8.8.8
                  - 8.8.4.4
                  - 223.5.5.5
                  - 223.6.6.6
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              nginx:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/video-player-nginx:test
                ports:
                  - "80:80"
                environment:
                  - http_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  - https_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  - no_proxy=localhost,127.0.0.1
                dns:
                  - 8.8.8.8
                  - 8.8.4.4
                  - 223.5.5.5
                  - 223.6.6.6
                depends_on:
                  frontend:
                    condition: service_healthy
                  backend:
                    condition: service_healthy
            EOL

            # 带重试的镜像拉取函数
            pull_image() {
              local image=$1
              local max_attempts=5
              local delay=10
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "尝试拉取 $image 镜像 (第 $attempt 次)"
                if docker pull --dns 8.8.8.8 --dns 8.8.4.4 ${{ secrets.DOCKERHUB_USERNAME }}/video-player-$image:test; then
                  echo "成功拉取 $image 镜像"
                  return 0
                fi
                
                if [ $attempt -eq $max_attempts ]; then
                  echo "尝试使用代理拉取镜像..."
                  export http_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  export https_proxy=http://registry.cn-hangzhou.aliyuncs.com
                  if docker pull --dns 8.8.8.8 --dns 8.8.4.4 ${{ secrets.DOCKERHUB_USERNAME }}/video-player-$image:test; then
                    echo "通过代理成功拉取镜像"
                    return 0
                  fi
                  echo "拉取 $image 镜像失败，已达到最大重试次数"
                  return 1
                fi
                
                echo "等待 ${delay} 秒后重试..."
                sleep $delay
                delay=$((delay * 2))
                attempt=$((attempt + 1))
              done
            }

            # 测试网络连接
            echo "Testing network connectivity..."
            ping -c 3 registry.hub.docker.com || true
            ping -c 3 registry.cn-hangzhou.aliyuncs.com || true
            
            # 清理 Docker 缓存
            echo "Cleaning Docker cache..."
            docker system prune -f
            
            # 拉取镜像
            pull_image frontend || exit 1
            pull_image backend || exit 1
            pull_image nginx || exit 1

            # Start test deployment
            docker-compose -f docker-compose.test.yml down --remove-orphans
            docker-compose -f docker-compose.test.yml up -d

            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            sleep 60

            # Test endpoints with retries
            test_endpoint() {
              local url=$1
              local max_attempts=5
              local delay=10
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "测试端点 $url (第 $attempt 次)"
                if curl -f $url; then
                  echo "端点 $url 测试成功"
                  return 0
                fi
                
                if [ $attempt -eq $max_attempts ]; then
                  echo "端点 $url 测试失败，已达到最大重试次数"
                  return 1
                fi
                
                echo "等待 ${delay} 秒后重试..."
                sleep $delay
                delay=$((delay * 2))
                attempt=$((attempt + 1))
              done
            }

            # 测试所有端点
            test_endpoint http://localhost:3000 || exit 1
            test_endpoint http://localhost:8000/health || exit 1
            test_endpoint http://localhost || exit 1

            echo "All tests passed successfully!"

      - name: Cleanup Test Environment
        if: always()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd $HOME/video-player-test
            docker-compose -f docker-compose.test.yml down --remove-orphans
            rm -rf $HOME/video-player-test

      - name: Test Results
        if: always()
        run: |
          echo "::notice::Test deployment completed with status: ${{ job.status }}" 
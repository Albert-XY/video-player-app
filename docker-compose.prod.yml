version: '3.8'

services:
  # 数据库服务
  db:
    image: postgres:14-alpine
    container_name: video_player_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-video_player}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: video_player_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-video_player}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - SECRET_KEY=${SECRET_KEY:-default_dev_key}
    volumes:
      - ./data:/app/data
    ports:
      - "8080:8080"
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: video_player_frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost/api
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Nginx服务 - 反向代理
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: video_player_nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # 数据库初始化服务
  db_init:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: video_player_db_init
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-video_player}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./python/database:/app/python/database
    command: ["python", "python/database/init_db.py"]
    restart: on-failure

volumes:
  db_data:
